name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  web:
    name: App (Next)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app-v1
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: app-v1/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test (sin cobertura)
        run: npm run test:ci --if-present

      - name: Build
        run: npm run build

  db-tests:
    name: DB (schema/RLS/seeds + tests)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: catalogo_test
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d catalogo_test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4

      - name: Install Postgres client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for DB
        run: until pg_isready -h localhost -U postgres -d catalogo_test; do sleep 1; done

      - name: Prepare extensions + Supabase shims
        env:
          PGURL: postgresql://postgres:postgres@localhost:5432/catalogo_test
        run: |
          psql "$PGURL" -v ON_ERROR_STOP=1 <<'SQL'
          create extension if not exists pgcrypto;
          create extension if not exists unaccent;
          create extension if not exists pg_trgm;

          -- Shims mÃ­nimos de Supabase
          create schema if not exists auth;
          create table  if not exists auth.users (id uuid primary key default gen_random_uuid());

          create schema if not exists app;
          create or replace function app.set_uid(uid uuid)
          returns void language plpgsql as $$
          begin perform set_config('app.uid', coalesce(uid::text,''), true); end $$;

          create or replace function auth.uid()
          returns uuid language sql stable as $$
          select nullif(current_setting('app.uid', true), '')::uuid $$;
          SQL

      - name: Apply schema / rls / seeds
        working-directory: app-v1
        env:
          PGURL: postgresql://postgres:postgres@localhost:5432/catalogo_test
        run: |
          psql "$PGURL" -v ON_ERROR_STOP=1 -f catalogo/db/schema.sql
          psql "$PGURL" -v ON_ERROR_STOP=1 -f catalogo/db/rls.sql
          psql "$PGURL" -v ON_ERROR_STOP=1 -f catalogo/db/seeds.sql

      - name: Create non-superuser role for RLS tests
        env:
          PGURL: postgresql://postgres:postgres@localhost:5432/catalogo_test
        run: |
          psql "$PGURL" -v ON_ERROR_STOP=1 <<'SQL'
          do $$ begin
            if not exists (select 1 from pg_roles where rolname='app') then
              create role app login password 'app';
            end if;
          end $$;

          grant usage on schema public to app;
          grant select, insert, update, delete on all tables in schema public to app;
          grant usage, select on all sequences in schema public to app;
          alter default privileges in schema public grant select, insert, update, delete on tables to app;
          alter default privileges in schema public grant usage, select on sequences to app;
          SQL

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: app-v1/package-lock.json

      - name: Install deps (Node)
        working-directory: app-v1
        run: |
          npm ci
          npm i -D pg @types/pg @types/node
          npm pkg set scripts.test:db="vitest run --reporter=dot --dir tests/db"
          - name: Install deps (Node)

      - name: Run DB tests (Vitest)
        working-directory: app-v1
        env:
          DATABASE_URL: postgresql://app:app@localhost:5432/catalogo_test
        run: npm run test:db
